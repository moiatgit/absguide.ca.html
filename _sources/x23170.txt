
#############
XXX  C.1. Sed
#############

*Sed* is a non-interactive ` [1]  <x23170.html#FTN.AEN23174>`__ **s**
tream **ed** itor. It receives text input, whether from
``      stdin     `` or from a file, performs certain operations on
specified lines of the input, one line at a time, then outputs the
result to ``      stdout     `` or to a file. Within a shell script,
*sed* is usually one of several tool components in a pipe.

*Sed* determines which lines of its input that it will operate on from
the *address range* passed to it. ` [2]  <x23170.html#FTN.AEN23185>`__
Specify this address range either by line number or by a pattern to
match. For example, ``             3d           `` signals *sed* to
delete line 3 of the input, and ``             /Windows/d           ``
tells sed that you want every line of the input containing a match to
"Windows" deleted.

Of all the operations in the *sed* toolkit, we will focus primarily on
the three most commonly used ones. These are **p** rinting (to
``      stdout     `` ), **d** eletion, and **s** ubstitution.


**Table C-1. Basic sed operators**


Operator

Name

Effect

``        [address-range]/p       ``

print

Print [specified address range]

``        [address-range]/d       ``

delete

Delete [specified address range]

``        s/pattern1/pattern2/       ``

substitute

Substitute pattern2 for first instance of pattern1 in a line

``        [address-range]/s/pattern1/pattern2/       ``

substitute

Substitute pattern2 for first instance of pattern1 in a line, over
``                 address-range               ``

``        [address-range]/y/pattern1/pattern2/       ``

transform

replace any character in pattern1 with the corresponding character in
pattern2, over ``                 address-range               ``
(equivalent of **tr** )

``        [address] i pattern Filename       ``

insert

Insert pattern at address indicated in file Filename. Usually used with
``        -i       `` ``                 in-place               ``
option.

``        g       ``

global

Operate on *every* pattern match within each matched line of input





|Note

Unless the ``         g        `` ( *global* ) operator is appended to a
*substitute* command, the substitution operates only on the *first*
instance of a pattern match within each line.




From the command-line and in a shell script, a sed operation may require
quoting and certain options.


.. code-block:: sh

    sed -e '/^$/d' $filename
    # The -e option causes the next string to be interpreted as an editing instruction.
    #  (If passing only a single instruction to sed, the "-e" is optional.)
    #  The "strong" quotes ('') protect the RE characters in the instruction
    #+ from reinterpretation as special characters by the body of the script.
    # (This reserves RE expansion of the instruction for sed.)
    #
    # Operates on the text contained in file $filename.



In certain cases, a *sed* editing command will not work with single
quotes.


.. code-block:: sh

    filename=file1.txt
    pattern=BEGIN

      sed "/^$pattern/d" "$filename"  # Works as specified.
    # sed '/^$pattern/d' "$filename"    has unexpected results.
    #        In this instance, with strong quoting (' ... '),
    #+      "$pattern" will not expand to "BEGIN".





|Note

*Sed* uses the ``         -e        `` option to specify that the
following string is an instruction or set of instructions. If there is
only a single instruction contained in the string, then this may be
omitted.





.. code-block:: sh

    sed -n '/xzy/p' $filename
    # The -n option tells sed to print only those lines matching the pattern.
    # Otherwise all input lines would print.
    # The -e option not necessary here since there is only a single editing instruction.




**Table C-2. Examples of sed operators**


Notation

Effect

``        8d       ``

Delete 8th line of input.

``        /^$/d       ``

Delete all blank lines.

``        1,/^$/d       ``

Delete from beginning of input up to, and including first blank line.

``        /Jones/p       ``

Print only lines containing "Jones" (with -n option).

``        s/Windows/Linux/       ``

Substitute "Linux" for first instance of "Windows" found in each input
line.

``        s/BSOD/stability/g       ``

Substitute "stability" for every instance of "BSOD" found in each input
line.

``        s/ *$//       ``

Delete all spaces at the end of every line.

``        s/00*/0/g       ``

Compress all consecutive sequences of zeroes into a single zero.

``        echo "Working on it."sed -e '1i How far are you along?'       ``

Prints "How far are you along?" as first line, "Working on it" as
second.

``        5i 'Linux is great.' file.txt       ``

Inserts 'Linux is great.' at line 5 of the file file.txt.

``        /GUI/d       ``

Delete all lines containing "GUI" .

``        s/GUI//g       ``

Delete all instances of "GUI" , leaving the remainder of each line
intact.



Substituting a zero-length string for another is equivalent to deleting
that string within a line of input. This leaves the remainder of the
line intact. Applying ``             s/GUI//           `` to the line


.. code-block:: sh

    The most important parts of any application are its GUI and sound effects



results in


.. code-block:: sh

    The most important parts of any application are its  and sound effects



A backslash forces the **sed** replacement command to continue on to the
next line. This has the effect of using the *newline* at the end of the
first line as the *replacement string* .


.. code-block:: sh

    s/^  */\
    /g



This substitution replaces line-beginning spaces with a newline. The net
result is to replace paragraph indents with a blank line between
paragraphs.
An address range followed by one or more operations may require open and
closed curly brackets, with appropriate newlines.


.. code-block:: sh

    /[0-9A-Za-z]/,/^$/{
    /^$/d
    }



This deletes only the first of each set of consecutive blank lines. That
might be useful for single-spacing a text file, but retaining the blank
line(s) between paragraphs.



|Note

The usual delimiter that *sed* uses is / . However, *sed* allows other
delimiters, such as % . This is useful when / is part of a replacement
string, as in a file pathname. See `Example
11-10 <loops1.html#FINDSTRING>`__ and `Example
16-32 <filearchiv.html#STRIPC>`__ .






|Tip

A quick way to double-space a text file is
``                   sed G        filename                 `` .




For illustrative examples of sed within shell scripts, see:

#. `Example 36-1 <wrapper.html#EX3>`__

#. `Example 36-2 <wrapper.html#EX4>`__

#. `Example 16-3 <moreadv.html#EX57>`__

#. `Example A-2 <contributed-scripts.html#RN>`__

#. `Example 16-17 <textproc.html#GRP>`__

#. `Example 16-27 <textproc.html#COL>`__

#. `Example A-12 <contributed-scripts.html#BEHEAD>`__

#. `Example A-16 <contributed-scripts.html#TREE>`__

#. `Example A-17 <contributed-scripts.html#TREE2>`__

#. `Example 16-32 <filearchiv.html#STRIPC>`__

#. `Example 11-10 <loops1.html#FINDSTRING>`__

#. `Example 16-48 <mathc.html#BASE>`__

#. `Example A-1 <contributed-scripts.html#MAILFORMAT>`__

#. `Example 16-14 <textproc.html#RND>`__

#. `Example 16-12 <textproc.html#WF>`__

#. `Example A-10 <contributed-scripts.html#LIFESLOW>`__

#. `Example 19-12 <here-docs.html#SELFDOCUMENT>`__

#. `Example 16-19 <textproc.html#DICTLOOKUP>`__

#. `Example A-29 <contributed-scripts.html#WHX>`__

#. `Example A-31 <contributed-scripts.html#BASHPODDER>`__

#. `Example A-24 <contributed-scripts.html#TOHTML>`__

#. `Example A-43 <contributed-scripts.html#STOPWATCH>`__

#. `Example A-55 <contributed-scripts.html#SEDAPPEND>`__

For a more extensive treatment of *sed* , refer to the `pertinent
references <biblio.html#DGSEDREF>`__ in the
`*Bibliography* <biblio.html>`__ .


Notes
~~~~~


` [1]  <x23170.html#AEN23174>`__

*Sed* executes without user intervention.


` [2]  <x23170.html#AEN23185>`__

If no address range is specified, the default is *all* lines.



